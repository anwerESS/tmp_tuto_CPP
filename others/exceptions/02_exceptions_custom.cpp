#include <iostream>
#include <exception>
#include <string>

/////// All exceptions generated by the standard library inherit from std::exception

// logic_error
// 		invalid_argument
// 		domain_error
// 		length_error
// 		out_of_range
// 		future_error(C++11)
// runtime_error
// 		range_error
// 		overflow_error
// 		underflow_error
// 		regex_error(C++11)
// 		system_error(C++11)
// 				ios_base::failure(C++11)
// 				filesystem::filesystem_error(C++17)
// 		tx_exception(TM TS)
// 		nonexistent_local_time(C++20)
// 		ambiguous_local_time(C++20)
// 		format_error(C++20)
// bad_typeid
// bad_cast
// 		bad_any_cast(C++17)
// bad_optional_access(C++17)
// bad_expected_access(C++23)
// bad_weak_ptr(C++11)
// bad_function_call(C++11)
// bad_alloc
// 		bad_array_new_length(C++11)
// bad_exception
// ios_base::failure(until C++11)
// bad_variant_access(C++17)


class MyException : public std::exception{
	std::string msg;
	std::string ret;
	const char * ret2;
public:
    MyException(const std::string msg):msg(msg){
		static int nbr_except = 0;
		ret = "---- BEGIN : const char* what() ---\n";
		ret += msg;
		ret += "NBR : " + std::to_string(++nbr_except);
		ret += "\n---- END : const char* what() ---\n";
		ret2 = ret.c_str();
	};
  const char* what() const noexcept{ return ret2;}
  static void showMyEcxeptionDescription(){std::cout<<"\n\nTHIS IS MY EXCEPTION TEST\n";}
};

class MyClass{
public:
	void myClassthrowExcept()  {throw MyException("test my ecxept msg");}
};

int main(int argc, char const *argv[])
{

	try{
		MyClass myclass;
		myclass.myClassthrowExcept();
	} catch (const MyException& err)
	{
		std::cout << err.what();
	}

	try{
		MyClass myclass;
		myclass.myClassthrowExcept();	} catch (const MyException& err)
	{
		std::cout << err.what();
	}

	std::cout << "\n------- END OF MAIN ----------\n";
	return 0;
}

